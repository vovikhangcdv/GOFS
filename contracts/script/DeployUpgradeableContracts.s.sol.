// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "forge-std/Script.sol";
import {Upgrades} from "openzeppelin-foundry-upgrades/Upgrades.sol";
import {EntityRegistry} from "../src/EntityRegistry.sol";
import {ComplianceRegistry} from "../src/ComplianceRegistry.sol";
import {CompliantToken} from "../src/CompliantToken.sol";
import {ExchangePortal} from "../src/ExchangePortal.sol";
import {VerificationCompliance} from "../src/compliances/VerificationCompliance.sol";
import {EntityTypeCompliance} from "../src/compliances/EntityTypeCompliance.sol";
import {AddressRestrictionCompliance} from "../src/compliances/AddressRestrictionCompliance.sol";
import {SupplyCompliance} from "../src/compliances/SupplyCompliance.sol";
import {TransactionTypeCompliance} from "../src/compliances/TransactionTypeCompliance.sol";

/**
 * @title DeployUpgradeableContracts
 * @dev Script to deploy all contracts using TransparentProxy pattern
 *
 * Usage:
 * forge script script/DeployUpgradeableContracts.s.sol:DeployUpgradeableContracts --fork-url <RPC_URL> --broadcast
 */
contract DeployUpgradeableContracts is Script {
    // Deployment configuration
    struct DeploymentConfig {
        string tokenName;
        string tokenSymbol;
        address usdcToken; // For ExchangePortal
        uint256 initialExchangeRate;
        address treasury;
        uint256 exchangeFee;
        uint256 maxSupply;
    }

    function run() external {
        DeploymentConfig memory config = DeploymentConfig({
            tokenName: "Government Digital Currency",
            tokenSymbol: "GDC",
            usdcToken: address(0x1234567890123456789012345678901234567890), // Replace with actual USDC address
            initialExchangeRate: 1e18, // 1:1 ratio initially
            treasury: msg.sender, // Use deployer as initial treasury
            exchangeFee: 100, // 1% fee (100 basis points)
            maxSupply: 1e9 * 1e18 // 1 billion tokens max supply
        });

        vm.startBroadcast();

        // Deploy EntityRegistry
        address entityRegistryProxy = Upgrades.deployTransparentProxy(
            "EntityRegistry.sol",
            msg.sender, // Initial admin
            abi.encodeCall(EntityRegistry.initialize, ())
        );

        console.log("EntityRegistry deployed at:", entityRegistryProxy);

        // Deploy ComplianceRegistry
        address complianceRegistryProxy = Upgrades.deployTransparentProxy(
            "ComplianceRegistry.sol",
            msg.sender, // Initial admin
            abi.encodeCall(ComplianceRegistry.initialize, ())
        );

        console.log("ComplianceRegistry deployed at:", complianceRegistryProxy);

        // Deploy Compliance Modules
        address verificationComplianceProxy = Upgrades.deployTransparentProxy(
            "VerificationCompliance.sol",
            msg.sender,
            abi.encodeCall(
                VerificationCompliance.initialize,
                (entityRegistryProxy)
            )
        );

        address entityTypeComplianceProxy = Upgrades.deployTransparentProxy(
            "EntityTypeCompliance.sol",
            msg.sender,
            abi.encodeCall(
                EntityTypeCompliance.initialize,
                (entityRegistryProxy)
            )
        );

        address addressRestrictionComplianceProxy = Upgrades
            .deployTransparentProxy(
                "AddressRestrictionCompliance.sol",
                msg.sender,
                abi.encodeCall(AddressRestrictionCompliance.initialize, ())
            );

        address transactionTypeComplianceProxy = Upgrades
            .deployTransparentProxy(
                "TransactionTypeCompliance.sol",
                msg.sender,
                abi.encodeCall(
                    TransactionTypeCompliance.initialize,
                    (entityRegistryProxy)
                )
            );

        console.log(
            "VerificationCompliance deployed at:",
            verificationComplianceProxy
        );
        console.log(
            "EntityTypeCompliance deployed at:",
            entityTypeComplianceProxy
        );
        console.log(
            "AddressRestrictionCompliance deployed at:",
            addressRestrictionComplianceProxy
        );
        console.log(
            "TransactionTypeCompliance deployed at:",
            transactionTypeComplianceProxy
        );

        // Deploy CompliantToken - this will need ComplianceRegistry first
        address compliantTokenProxy = Upgrades.deployTransparentProxy(
            "CompliantToken.sol",
            msg.sender,
            abi.encodeCall(
                CompliantToken.initialize,
                (config.tokenName, config.tokenSymbol, complianceRegistryProxy)
            )
        );

        console.log("CompliantToken deployed at:", compliantTokenProxy);

        // Deploy SupplyCompliance with token address
        address supplyComplianceProxy = Upgrades.deployTransparentProxy(
            "SupplyCompliance.sol",
            msg.sender,
            abi.encodeCall(SupplyCompliance.initialize, (compliantTokenProxy))
        );

        console.log("SupplyCompliance deployed at:", supplyComplianceProxy);

        // Deploy ExchangePortal
        address exchangePortalProxy = Upgrades.deployTransparentProxy(
            "ExchangePortal.sol",
            msg.sender,
            abi.encodeCall(
                ExchangePortal.initialize,
                (
                    compliantTokenProxy,
                    config.usdcToken,
                    config.initialExchangeRate,
                    config.treasury,
                    config.exchangeFee
                )
            )
        );

        console.log("ExchangePortal deployed at:", exchangePortalProxy);

        // Post-deployment configuration
        console.log("\n=== Post-deployment configuration ===");

        // Add compliance modules to ComplianceRegistry
        ComplianceRegistry complianceRegistry = ComplianceRegistry(
            complianceRegistryProxy
        );
        complianceRegistry.addModule(verificationComplianceProxy);
        complianceRegistry.addModule(entityTypeComplianceProxy);
        complianceRegistry.addModule(addressRestrictionComplianceProxy);
        complianceRegistry.addModule(supplyComplianceProxy);
        complianceRegistry.addModule(transactionTypeComplianceProxy);

        console.log("All compliance modules added to ComplianceRegistry");

        // Set max supply for SupplyCompliance
        SupplyCompliance supplyCompliance = SupplyCompliance(
            supplyComplianceProxy
        );
        supplyCompliance.setMaxSupply(config.maxSupply);

        console.log("Max supply set to:", config.maxSupply);

        vm.stopBroadcast();

        // Log all deployed addresses for easy reference
        console.log("\n=== DEPLOYMENT SUMMARY ===");
        console.log("EntityRegistry:", entityRegistryProxy);
        console.log("ComplianceRegistry:", complianceRegistryProxy);
        console.log("CompliantToken:", compliantTokenProxy);
        console.log("ExchangePortal:", exchangePortalProxy);
        console.log("VerificationCompliance:", verificationComplianceProxy);
        console.log("EntityTypeCompliance:", entityTypeComplianceProxy);
        console.log(
            "AddressRestrictionCompliance:",
            addressRestrictionComplianceProxy
        );
        console.log("SupplyCompliance:", supplyComplianceProxy);
        console.log(
            "TransactionTypeCompliance:",
            transactionTypeComplianceProxy
        );
    }
}
